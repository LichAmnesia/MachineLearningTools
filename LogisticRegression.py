# -*- coding: utf-8 -*-
# @Author: Lich_Amnesia  
# @Email: alwaysxiaop@gmail.com
# @Date:   2016-04-09 21:00:45
# @Last Modified time: 2016-04-10 01:29:25
# @FileName: LogisticRegression.py

import numpy as np
import matplotlib.pyplot as plt
import sys,os

# process the origin data to formatted train/test data like the following
# train.txt
# gre gpa rank admit
# 300 3.00 1 1
# 300 2.00 1 0
# Also random generate train/test dataset. 
# All the dataset size is 400, 40 for test set and other for training.
def preDataProcess():
	# configure file_path
	file_path = 'data/LogisticRegression_origindata.csv'
	trainFile = 'data/LogisticRegression_train.txt'
	testFile = 'data/LogisticRegression_test.txt'

	originDataSet = np.loadtxt(open(file_path,"rb"),delimiter=",",skiprows=1)
	originDataSet = np.c_[originDataSet[:,1:],originDataSet[:,0]]
	originDataSize = originDataSet.shape[0]
	# generate randomArr until there do not have one pair of same integers.
	isRandom = False
	while not isRandom:
		randomArr = np.sort(np.random.randint(0,originDataSize,size=originDataSize/10))
		isRandom = all(randomArr[i] != randomArr[i + 1] for i in range(randomArr.size - 1))

	trainDataSet = np.array([])
	testDataSet = np.array([])
	j = 0
	for i in range(originDataSize):
		if j < randomArr.size and i == randomArr[j]:
			if testDataSet.size == 0:
				testDataSet = originDataSet[i]
			else :
				testDataSet = np.vstack((testDataSet, originDataSet[i]))
			j += 1
		else :
			if trainDataSet.size == 0:
				trainDataSet = originDataSet[i]
			else :
				trainDataSet = np.vstack((trainDataSet, originDataSet[i]))

	# Add X0 to the dataSet
	X0 = np.array([1.0 for i in range(trainDataSet.shape[0])])
	trainDataSet = np.c_[X0,trainDataSet]
	X0 = np.array([1.0 for i in range(testDataSet.shape[0])])
	testDataSet = np.c_[X0,testDataSet]
	np.savetxt(trainFile,trainDataSet,fmt='%.2f %.2f %.2f %.2f %d')
	np.savetxt(testFile,testDataSet,fmt='%.2f %.2f %.2f %.2f %d')
	return trainDataSet, testDataSet

# load data from train/test txt file, which has been generated by preDataProcess function.
def loadData():
	trainFile = 'data/LogisticRegression_train.txt'
	testFile = 'data/LogisticRegression_test.txt'
	trainDataSet = np.loadtxt(open(trainFile,"rb"),delimiter=" ")
	testDataSet = np.loadtxt(open(testFile,"rb"),delimiter=" ")
	return trainDataSet, testDataSet

# norm
def norm(input_x):
	mean = np.mean(input_x,axis=0)
	std = np.std(input_x,axis=0)
	n, m = input_x.shape
	for i in range(n):
		for j in range(m):
			if std[j] != 0:
				input_x[i][j] = (input_x[i][j] - mean[j]) / std[j]
	return input_x
	

#
def sigmoid(input_x):
	return (1.0 / (1.0 + np.exp(-input_x)))

# alpha: steplength maxCycles: number of iterations
def gradAscent(trainDataSet, alpha, maxCycles):
	X_parameters, Y_parameters = trainDataSet[:,:-1],trainDataSet[:,-1]
	X_parameters = norm(X_parameters)
	X_mat = np.mat(X_parameters) # size: n * m (m = 4, X0=1 now)
	y_mat = np.mat(Y_parameters).T # size: n * 1
	n,m = X_mat.shape
	W = np.zeros((m,1)) # initialize W as zero vector, W has m columns for X_i
	for i in range(maxCycles):
		input_x = np.dot(X_mat,W)
		h = sigmoid(input_x)
		error = h - y_mat  # size: n * 1
		W = W - alpha * np.dot(X_mat.T,error)
	return W

# classify test dataset and give error rate 
def classify(testDataSet, W):
	X_parameters, Y_parameters = testDataSet[:,:-1],testDataSet[:,-1]
	X_parameters = norm(X_parameters)
	print X_parameters
	X_mat = np.mat(X_parameters) # size: n * m (m = 3 now)
	y_mat = np.mat(Y_parameters).T # size: n * 1
	n, m = X_mat.shape
	h = sigmoid(np.dot(X_mat,W))
	error = 0.0
	for i in range(n):
		# print round(h[i]), int(y_mat[i])
		if round(h[i]) != int(y_mat[i]):
			error += 1
	print np.c_[h,y_mat]
	print('error rate is {0:.4f}'.format(error / n))

def main():
	# preDataProcess will generate random train/test dataset, you can only use loadData to get dataset.
	# trainDataSet, testDataSet = preDataProcess()

	trainDataSet, testDataSet = loadData()
	# configure steplength and iterations
	alpha = 1e-3
	maxCycles = 400
	W = gradAscent(trainDataSet, alpha, maxCycles)
	classify(testDataSet,W)
	# gradAscent(testDataSet, alpha, maxCycles)


if __name__ == '__main__':
	main()
